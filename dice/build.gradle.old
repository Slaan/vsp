/**
 * Alex   Mantel
 * Daniel Hofmeister
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
        classpath("com.github.rholder:gradle-one-jar:1.0.4")
        classpath("com.bmuschko:gradle-docker-plugin:2.6.1")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'checkstyle'
apply plugin: 'gradle-one-jar'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

mainClassName = "vsp.dice.MyMainClass"

jar {
    baseName = 'gs-rest-service'
    version = '0.1.0'
}

repositories {
    mavenCentral()
}


sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")

    testCompile('org.assertj:assertj-core:3.1.0')
    testCompile('org.testng:testng:6.9.6')
    testCompile('com.jayway.restassured:rest-assured:2.4.1')
}

checkstyle {
    ignoreFailures = false
    configFile = new File(rootDir, "./../doc/codingstyle/checkstyle.xml")
    // List version explicit, since gradle pull an outdated version
    toolVersion = "6.11.2"
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task buildFatJar(type: OneJar) {
    mainClass = mainClassName
    archiveName = 'dice_service.jar'
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

/*
 *  DOCKER
 */
task copyDist(type: Copy, dependsOn: [build, wrapper]) {
    from('build/distributions/' + jar.baseName + '.tar')
    into('build/docker/')
}

task createDockerfile(type: Dockerfile) {
    dependsOn copyDist
    destFile = project.file('build/docker/Dockerfile')
    from 'java:8'
    exposePort 8080
    entryPoint("")
    addFile({jar.baseName + '.tar'}, { '/' })
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    println 'DEBUG: ' + createDockerfile.destFile.parentFile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'dice'
}

task createAppContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    portBindings = ['8080:8080']
}

task startAppContainer(type: DockerStartContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task stopAppContainer(type: DockerStopContainer) {
    targetContainerId { createAppContainer.getContainerId() }
}

task integrationTest(type: Test) {
    dependsOn startAppContainer
    useTestNG()
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    // Even when no files are changed, this will run
    // the integration test anyway.
    outputs.upToDateWhen { false }
    finalizedBy stopAppContainer
}

docker {
  url = "$System.env.DOCKER_HOST"
  if (System.getenv("DOCKER_CERT_PATH")) {
    certPath = new File("$System.env.DOCKER_CERT_PATH")
  }
}


// Running integration tests requires that unit tests are executed first
integrationTest.dependsOn test
